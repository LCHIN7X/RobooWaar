<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36" version="27.0.9">
  <diagram id="JUqrTPqwwx3-96pAc60I" name="Page-1">
    <mxGraphModel dx="2291" dy="1031" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-1" value="Logger" style="swimlane;whiteSpace=wrap;html=1;align=center;verticalAlign=middle;" vertex="1" parent="1">
          <mxGeometry x="80" y="90" width="340" height="190" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-42" value="+Logger&lt;div&gt;+bool open()&lt;/div&gt;&lt;div&gt;+void close()&lt;/div&gt;&lt;div&gt;+Logger &amp;amp;operator &amp;lt;&amp;lt; (const T &amp;amp;outputContent)&lt;/div&gt;&lt;div&gt;+Logger &amp;amp;operator &amp;lt;&amp;lt;(ostream &amp;amp;(*mainip)(ostream &amp;amp;))&lt;/div&gt;&lt;div&gt;~Logger&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-1">
          <mxGeometry x="10" y="120" width="410" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-43" value="-ofstream outputFile&lt;div&gt;-string fileName&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-1">
          <mxGeometry x="10" y="40" width="320" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-45" value="" style="endArrow=none;html=1;rounded=0;exitX=0;exitY=0.25;exitDx=0;exitDy=0;" edge="1" parent="-IIFnxhFtsVR1zrrtCzc-1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint y="80" as="sourcePoint" />
            <mxPoint x="340" y="80" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-2" value="Class Details" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="80" y="40" width="170" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-46" value="Battlefield" style="swimlane;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="80" y="380" width="430" height="560" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-47" value="&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;- int height&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;-int width&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;-int steps&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;-int numberOfRbots&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;-vector &amp;lt;Robot *&amp;gt;listOfRobots&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;-vector &amp;lt;vector&amp;lt;Root*&amp;gt;&amp;gt;battlefiledGrid&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;font style=&quot;color: rgb(153, 0, 153);&quot;&gt;-v&lt;/font&gt;&lt;font style=&quot;color: rgb(153, 0, 153);&quot;&gt;ector &amp;lt;pair&amp;lt;string, int&amp;gt;&amp;gt; respawnQueue&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;font style=&quot;color: rgb(153, 0, 153);&quot;&gt;-map &amp;lt;string,int&amp;gt; respawnCounts&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;font style=&quot;color: rgb(153, 0, 153);&quot;&gt;-queue&amp;lt;pair&amp;lt;string,int&amp;gt;&amp;gt; reentryQueue&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;font style=&quot;color: rgb(153, 0, 153);&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-46">
          <mxGeometry x="-30" y="90" width="300" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-50" value="" style="endArrow=none;html=1;rounded=0;" edge="1" parent="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="80" y="560" as="sourcePoint" />
            <mxPoint x="510" y="560" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-51" value="&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp;+Battlefield() : height(0), width(0), steps(0), numberOfRobots(0) {};&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp;~Battlefield();&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; +void setDimensions(int h, int w)&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; +void printDimensions() const&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+void setSteps(int s)&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+void printSteps() const&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+ int getSteps() const&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+void setNumberOfRobots(int n)&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+void printNumberOfRobots() const&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+int getNumberOfRobots() const&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+const vector&amp;lt;Robot *&amp;gt; getListOfRobots() const&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+int getWidth() const { return width; }&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+int getHeight() const { return height; }&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+&lt;font style=&quot;color: rgb(204, 0, 102);&quot;&gt;void simulationStep();&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &lt;font style=&quot;color: rgb(102, 204, 0);&quot;&gt;&amp;nbsp;+ void addNewRobot(Robot *robot);&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;font style=&quot;color: rgb(102, 204, 0);&quot;&gt;&amp;nbsp; &amp;nbsp;+int getNumberOfAliveRobots();&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+void cleanupDestroyedRobots();&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &lt;font style=&quot;color: rgb(153, 0, 153);&quot;&gt;&amp;nbsp;+void respawnRobots();&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;font style=&quot;color: rgb(153, 0, 153);&quot;&gt;&amp;nbsp; &amp;nbsp;+void queueForReentry(Robot *robot);&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+Robot *getRobotAt(int x, int y) const;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+void placeRobot(Robot *robot, int x, int y);&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+void removeRobotFromGrid(Robot *robot);&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+ bool isPositionAvailable(int x, int y);&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+bool isPositionWithinGrid(int x, int y) const;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;+ void displayBattlefield();&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="60" y="820" width="410" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-52" value="Robot" style="swimlane;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="700" y="70" width="550" height="550" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-53" value="&lt;div&gt;&amp;nbsp; &amp;nbsp;- int positionX;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;- int positionY;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-52">
          <mxGeometry x="-80" y="40" width="260" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-54" value="" style="endArrow=none;html=1;rounded=0;exitX=0;exitY=0.25;exitDx=0;exitDy=0;" edge="1" parent="-IIFnxhFtsVR1zrrtCzc-52">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint y="90" as="sourcePoint" />
            <mxPoint x="530" y="90" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-55" value="&lt;div&gt;&amp;nbsp; &amp;nbsp; string name;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; int lives;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; bool hidden;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; bool isDie = false;&amp;nbsp; &amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; bool isHurt = false;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; virtual bool isHit() = 0;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; bool getEnemyDetectedNearby() const;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-52">
          <mxGeometry x="10" y="140" width="340" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-56" value="" style="endArrow=none;html=1;rounded=0;exitX=0;exitY=0.25;exitDx=0;exitDy=0;" edge="1" parent="-IIFnxhFtsVR1zrrtCzc-52">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint y="230" as="sourcePoint" />
            <mxPoint x="530" y="230" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-57" value="&lt;div&gt;&amp;nbsp; &amp;nbsp;+Robot(string name, int x, int y)&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;: name(name), positionX(x), positionY(y), lives(3), hidden(false) {}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp; &amp;nbsp;+virtual ~Robot() = default;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp; &amp;nbsp;+virtual void think() = 0;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+virtual void act() = 0;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+virtual void move() = 0;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+virtual void fire() = 0;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+virtual void look(int X, int Y) = 0;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+string getName() const&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+ int getX() const&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+ int getY() const&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+&amp;nbsp; int getLives() const&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+ void setLives(int numOfLives)&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+bool isHidden() const&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+ bool getIsDie() const&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+void setIsDie(bool val)&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+ bool getIsHurt() const&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+void setIsHurt(bool val)&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp; &amp;nbsp;+void setPosition(int x, int y)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp; &amp;nbsp;+void takeDamage()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp; &amp;nbsp;+void setHidden(bool state)&lt;/span&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-52">
          <mxGeometry y="370" width="960" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-58" value="MovingRobot" style="swimlane;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="700" y="730" width="520" height="180" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-64" value="int moveCount;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-58">
          <mxGeometry x="-160" y="30" width="450" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-65" value="&lt;div style=&quot;text-align: left;&quot;&gt;+MovingRobot(const string &amp;amp;name, int x, int y)&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); text-align: center;&quot;&gt;&amp;nbsp;: Robot(name, x, y), moveCount(0) {}&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); text-align: center;&quot;&gt;+ virtual ~MovingRobot() = default;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); text-align: center;&quot;&gt;+virtual void move() = 0&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); text-align: center;&quot;&gt;+bool isValidMove(int newX, int newY, const Battlefield &amp;amp;battlefield) const&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); text-align: center;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; text-align: center;&quot;&gt;void incrementMoveCount()&lt;/span&gt;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-58">
          <mxGeometry x="-75" y="10" width="650" height="210" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-62" value="GenericRobot" style="swimlane;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="1580" y="80" width="880" height="560" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-63" value="&lt;div&gt;&amp;nbsp; &amp;nbsp; bool hasUpgraded[3] = {false, false, false};&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; Battlefield *battlefield = nullptr;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; bool pendingUpgrade = false;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; string upgradeType = &quot;&quot;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; bool enemyDetectedNearby = false;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp; &amp;nbsp; vector&amp;lt;Robot *&amp;gt; detectedTargets;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; vector&amp;lt;string&amp;gt; upgrades;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; availableSpaces;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; bool hasLooked = false;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; bool hasMoved = false;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; bool hasThought = false;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; bool hasFired = false;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-62">
          <mxGeometry y="110" width="630" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-81" value="&lt;div&gt;&amp;nbsp; &amp;nbsp; +GenericRobot(const string &amp;amp;name, int x, int y);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; ~GenericRobot() override;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;void setBattlefield(Battlefield *bf);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;void think() override;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;void act() override;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;void move() override;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;void fire() override;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;void look(int X, int Y) override;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;bool canUpgrade(int area) const;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;void setUpgraded(int area);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;bool isHit() override;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;void setPendingUpgrade(const string &amp;amp;type);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;bool PendingUpgrade() const;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;string getUpgradeType() const;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;void clearPendingUpgrade();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;bool getEnemyDetectedNearby() const;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&amp;nbsp; &amp;nbsp;+void resetActionFlags()&lt;/span&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-62">
          <mxGeometry y="330" width="590" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-66" value="" style="endArrow=none;html=1;rounded=0;" edge="1" parent="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="700" y="800" as="sourcePoint" />
            <mxPoint x="1220" y="800" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-67" value="ShootingRobot" style="swimlane;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="710" y="1040" width="490" height="230" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-68" value="int ammo;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-67">
          <mxGeometry x="20" y="40" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-69" value="&lt;div&gt;&amp;nbsp; +ShootingRobot(const string &amp;amp;name, int x, int y, int initialAmmo)&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;: Robot(name, x, y), ammo(initialAmmo) {}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp; &amp;nbsp;+virtual ~ShootingRobot() = default;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+virtual void fire() = 0;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+bool hasAmmo() const&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp; &amp;nbsp;+ void useAmmo()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+ int getAmmo() const&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;+bool hitProbability() const&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-67">
          <mxGeometry x="15" y="140" width="550" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-70" value="" style="endArrow=none;html=1;rounded=0;" edge="1" parent="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="710" y="1120" as="sourcePoint" />
            <mxPoint x="1200" y="1120" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-71" value="SeeingRobot" style="swimlane;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="1520" y="735" width="810" height="200" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-72" value="&lt;div&gt;&amp;nbsp; &amp;nbsp; int visionRange;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; vector&amp;lt;Robot *&amp;gt; detectedTargets;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; bool enemyDetectedNearby;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-71">
          <mxGeometry y="45" width="250" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-73" value="" style="endArrow=none;html=1;rounded=0;" edge="1" parent="-IIFnxhFtsVR1zrrtCzc-71">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint y="85" as="sourcePoint" />
            <mxPoint x="810" y="85" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-75" value="&lt;div&gt;&amp;nbsp; &amp;nbsp; +SeeingRobot(const string &amp;amp;name, int x, int y, int range)&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;: Robot(name, x, y), visionRange(range) {}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; +virtual ~SeeingRobot() = default;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; +virtual void look(int X, int Y) = 0;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; + const vector&amp;lt;Robot *&amp;gt; &amp;amp;getDetectedTargets() const&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; + void setDetectedTargets(const vector&amp;lt;Robot *&amp;gt; &amp;amp;targets)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; +bool getEnemyDetectedNearby() const&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; +void setEnemyDetectedNearby(bool detected)&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-71">
          <mxGeometry y="125" width="620" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-76" value="ThinkingRobot" style="swimlane;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="1540" y="1060" width="490" height="160" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-77" value="int strategyLevel;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-76">
          <mxGeometry x="-10" y="30" width="150" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-78" value="" style="endArrow=none;html=1;rounded=0;" edge="1" parent="-IIFnxhFtsVR1zrrtCzc-76">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="-10" y="60" as="sourcePoint" />
            <mxPoint x="490" y="60" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-79" value="&lt;div&gt;+ThinkingRobot(const string &amp;amp;name, int x, int y, int strategy)&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;: Robot(name, x, y), strategyLevel(strategy) {}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;+virtual ~ThinkingRobot() = default;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;+void think()&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;+int getStrategyLevel() const&amp;nbsp;&lt;/span&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="-IIFnxhFtsVR1zrrtCzc-76">
          <mxGeometry x="10" y="100" width="550" height="30" as="geometry" />
        </mxCell>
        <mxCell id="-IIFnxhFtsVR1zrrtCzc-80" value="" style="endArrow=none;html=1;rounded=0;" edge="1" parent="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1580" y="300" as="sourcePoint" />
            <mxPoint x="2460" y="300" as="targetPoint" />
          </mxGeometry>
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
